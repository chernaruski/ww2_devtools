#include "std\lodNames.inc"
console=openStandardIO;

//example usage
//O2Script.exe -a O2Scripts\NamedSelectionCreate.bio2s p:\test\name.p3d selectionName path\textureName.paa

//Library methods
//==================

_createNewSelection =
{
	private ["_currentLOD","_selName","_sel"];
	_currentLOD = _this select 0;
	_selName = _this select 1;
	_sel = _this select 2;

	if (_currentLOD checkSelectionName _selName) then
	{
		//new selection already exists
		//ToDo: handle that if needed
	}
	else
	{
		_currentLOD save _sel as _selName;
	};
};

_getTexOrMatName =
{
	private["_currentLOD","_faceIndex","_isMat"];
	_currentLOD = _this @ 0;
	_faceIndex = _this @ 1;
	_isMat = _this @ 2;

	if (_isMat) then
	{
		getMaterial (_currentLOD face _faceIndex)
	}
	else
	{
		getTexture (_currentLOD face _faceIndex)
	}
};

_getProxyFaces =
{
	private ["_currentLOD","_faces","_face","_proxySel"];
	_currentLOD = _this;

	_faces = [];
	{
		if (_x @ [0,6]=="proxy:") then
		{
			_proxySel = _currentLOD loadSelection _x;
			_face = (getSelectedFaces _proxySel) @ 0;
			_faces set [count _faces,_face];
		};
	} forEach (getSelections _currentLOD);

	_faces
};

_faceIndicesByTexture =
{
	private["_currentLOD","_texName","_texIsMat","_proxyFaces","_faceIndices"];
	_currentLOD = _this @ 0;
	_texName = _this @ 1;
	_texIsMat = _this @ 2;

	_proxyFaces = _currentLOD call _getProxyFaces;

	_faceIndices = [];
	_currentLOD forEachFace [{[_currentLOD,_x,_texIsMat] call _getTexOrMatName == _texName},
	{
		if (!(_x in _proxyFaces)) then
		{
			_faceIndices set [count _faceIndices,_x];
		};
	}];

	_faceIndices
};

_selectByFaceIndices =
{
	private ["_currentLOD","_faceIndices","_sel"];
	_currentLOD = _this @ 0;
	_facesIndices = _this @ 1;

	_sel = newSelection _currentLOD;
	_sel selectFaces _facesIndices;
	selectPointsFromFaces _sel
};

_selectionByTexture =
{
	private["_currentLOD","_texName","_texIsMat","_faceIndices"];
	_currentLOD = _this @ 0;
	_texName = _this @ 1;
	_texIsMat = _this @ 2;

	_faceIndices = [_currentLOD,_texName,_texIsMat] call _faceIndicesByTexture;
	[_currentLOD,_faceIndices] call _selectByFaceIndices
};

_createNewSelectionByTexture =
{
	private["_currentLOD","_selName","_texName","_texIsMat","_sel"];
	_currentLOD = _this select 0;
	_selName = _this select 1;
	_texName = _this select 2;
	_texIsMat = _this select 3;

	_sel = [_currentLOD,_texName,_texIsMat] call _selectionByTexture;
	[_currentLOD,_selName,_sel] call _createNewSelection;
};

// main
_sourcePath = this @ 0;
_targetPath = _sourcePath;

_selectionName = this @ 1;
_textureName = this @ 2;

_p3d = newLODObject;
_p3d loadP3D _sourcePath;

_LODs = getObjects _p3d;
_resolutions = getResolutions _p3d;

console<<"_sourcePath: "<<_sourcePath<<eoln;
console<<"_selectionName: "<<_selectionName<<eoln;
console<<"_textureName: "<<_textureName<<eoln;

for "_i" from 0 to ((count _p3d) - 1) do
{
	private["_currentLOD","_currentResolution"];
	_currentLOD = _LODs @ _i;
	_currentResolution = _resolutions @ _i;

	if (IS_LOD_RESOLUTION(_currentResolution)) then
	{
		[_currentLOD,_selectionName,_textureName,false] call _createNewSelectionByTexture;
	};
};

save (_p3d as _targetPath);