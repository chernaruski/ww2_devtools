#include "std\lodNames.inc"
console=openStandardIO;

//example usage
//O2Script.exe -a O2Scripts\RemoveFacesOfTexture_CmdLine.bio2s p:\test\name.p3d path\textureOrMaterialName.paa/rvmat

//Library methods
//==================

/*
_deleteFace =
{
	_faceIndex = _x;
	_texture = getTexture (_currentLOD face _faceIndex);

	if (_texture == TextureToRemove) then
	{
		_faceSel = newSelection _currentLOD;
		_faceSel selectFace _x;
//		_faceSel selectFaces (getSelectedFaces _sel);

		deleteSelected _faceSel;
	};
};
*/


_removeIsolatedPoints =
{
	private["_currentLOD","_usedPoints","_isolatedPoints","_face","_verts","_sel"];
	_currentLOD = _this;

	//find all "used" (in faces) points
	_usedPoints = [];
	_isolatedPoints = [];

	_currentLOD forEachFace [{true},
	{
		_faceIndex = _x;
		_face = _currentLOD face _faceIndex;
		_verts = getVertices _face;
		{
			if (!(_x in _usedPoints)) then {_usedPoints set [count _usedPoints,_x]};
		} forEach _verts;
	}];

	_currentLOD forEachPoint [{!(_x in _usedPoints)},
	{
		_isolatedPoints set [count _isolatedPoints,_x];
	}];

	//_currentLOD callRuntime "isolatedpts";
	_sel = newSelection _currentLOD;
	_sel selectPoints _isolatedPoints;
	deleteSelected _sel;
};

_selectByFaceIndices =
{
	private ["_currentLOD","_faceIndices","_sel","_return"];
	_currentLOD = _this @ 0;
	_facesIndices = _this @ 1;

	_sel = newSelection _currentLOD;
	_sel selectFaces _facesIndices;
	_return = selectPointsFromFaces _sel;

	_return
};

_getTexOrMatName =
{
	private["_currentLOD","_faceIndex","_isMat","_return"];
	_currentLOD = _this @ 0;
	_faceIndex = _this @ 1;
	_isMat = _this @ 2;

	_return = "";

	if (_isMat) then
	{
		_return = getMaterial (_currentLOD face _faceIndex)
	}
	else
	{
		_return = getTexture (_currentLOD face _faceIndex)
	};

	_return
};

_getProxyFaces =
{
	private ["_currentLOD","_faces","_face","_selections","_proxySel"];
	_currentLOD = _this;

	_faces = [];
	_selections = (getSelections _currentLOD);

	{
		if (_x @ [0,6]=="proxy:") then
		{
			_proxySel = _currentLOD loadSelection _x;
			_face = (getSelectedFaces _proxySel) @ 0;
			_faces set [count _faces,_face];
		};
	} forEach _selections;

	_faces
};

_faceIndicesByTexture =
{
	private["_currentLOD","_texName","_faceIndices"];
	_currentLOD = _this @ 0;
	_texName = _this @ 1;
	_texIsMat = _this @ 2;
	if (logging) then {console<<"_currentLOD: "<<str _currentLOD<<eoln;};
	if (logging) then {console<<"_texName: "<<_texName<<eoln;};
	if (logging) then {console<<"_texIsMat: "<<str _texIsMat<<eoln;};

	_proxyFaces = _currentLOD call _getProxyFaces;
	if (logging) then {console<<"_proxyFaces: "<<str _proxyFaces<<eoln;};

	_faceIndices = [];
	_currentLOD forEachFace
	[
		{
			if (logging) then {console<<"_x: "<<str _x<<eoln;};
			if (logging) then {console<<"_texOrMat: "<<([_currentLOD,_x,_texIsMat] call _getTexOrMatName)<<eoln;};
			if (logging) then {console<<"found?: "<<str (([_currentLOD,_x,_texIsMat] call _getTexOrMatName) == _texName)<<eoln;};
			([_currentLOD,_x,_texIsMat] call _getTexOrMatName) == _texName
		},
		{
			if (!(_x in _proxyFaces)) then
			{
				_faceIndices set [count _faceIndices,_x];
			};
		}
	];
	if (logging) then {console<<"_faceIndices: "<<str _faceIndices<<eoln;};

	_faceIndices
};

_selectionByTexture =
{
	private["_currentLOD","_texName","_texIsMat","_faceIndices","_sel"];
	_currentLOD = _this @ 0;
	_texName = _this @ 1;
	_texIsMat = _this @ 2;

	_faceIndices = [_currentLOD,_texName,_texIsMat] call _faceIndicesByTexture;
	_sel = [_currentLOD,_faceIndices] call _selectByFaceIndices;

	_sel
};

_removeFaces =
{
	private["_currentLOD","_sel","_faceSel","_selectedFaces"];
	_currentLOD = _this @ 0;
	_sel = _this @ 1;

	//create new selection with just faces
	_faceSel = newSelection _currentLOD;
	_selectedFaces = getSelectedFaces _sel;
	_faceSel selectFaces _selectedFaces;

	deleteSelected _faceSel;
};

_optimizeByTex =
{
	private["_currentLOD","_texName","_texIsMat","_sel"];
	_currentLOD = _this @ 0;
	_texName = _this @ 1;
	_texIsMat = _this @ 2;

	_sel = [_currentLOD,_texName,_texIsMat] call _selectionByTexture;
	[_currentLOD,_sel] call _removeFaces;
};

// main
_sourcePath = this @ 0;
_targetPath = _sourcePath;

_textureOrMaterialToRemove = this @ 1;

_p3d = newLODObject;
_p3d loadP3D _sourcePath;

_LODs = getObjects _p3d;
_resolutions = getResolutions _p3d;

logging = false;
//logging = true;

if (logging) then {console<<"_sourcePath: "<<_sourcePath<<eoln;};

for "_i" from 0 to ((count _p3d) - 1) do
{
	private["_currentLOD","_currentResolution"];
	_currentLOD = _LODs @ _i;
	_currentResolution = _resolutions @ _i;

//	_currentLOD forEachFace [{true},_deleteFace];

//	if (IS_LOD_RESOLUTION(_currentResolution)) then
//	{
//		halt;
		[_currentLOD,_textureOrMaterialToRemove,false] call _optimizeByTex;
		[_currentLOD,_textureOrMaterialToRemove,true] call _optimizeByTex;

		_currentLOD call _removeIsolatedPoints;
//	};
};

save (_p3d as _targetPath);